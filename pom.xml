<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>org.storytlr.site</groupId>
	<artifactId>storytlr.org</artifactId>
	<version>0.0.22-SNAPSHOT</version>
	<properties>
		<encoding>UTF-8</encoding>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8
		</project.reporting.outputEncoding>
		<maven.compile.encoding>UTF-8</maven.compile.encoding>
	</properties>
	<build>
  <!--  finalName is used in the name for the zip that is created by assembly:assembly -->
    <finalName>storytlr.org.final</finalName>
		<plugins>
    <!-- this plugin makes sure a zip is created for a release that can be uploaded to artifactory 
            note that the assemble directory is under conf instead of src due to the nature of this project.-->
      <plugin>
        <artifactId>maven-assembly-plugin</artifactId>
        <version>2.4</version>
        <configuration>
          <descriptors>
            <descriptor>conf/assemble/distribution.xml</descriptor>
          </descriptors>
        </configuration>
      </plugin>
			<!-- call the less compiler with command 'mvn lesscss:compile'. Make sure 
				compress is set to false, otherwise the sprite compiler can't do its work -->
			<plugin>
				<groupId>org.lesscss</groupId>
				<artifactId>lesscss-maven-plugin</artifactId>
				<version>1.3.3</version>
				<configuration>
					<sourceDirectory>${project.basedir}/src/_assets/less/
					</sourceDirectory>
					<outputDirectory>${project.basedir}/target/web-app/_assets/css/
					</outputDirectory>
					<compress>false</compress>
					<includes>
						<include>stylesheet.less</include>
					</includes>
				</configuration>
				<executions>
					<execution>
						<goals>
							<goal>compile</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>net.alchim31.maven</groupId>
				<artifactId>yuicompressor-maven-plugin</artifactId>
				<version>1.3.0</version>
				<executions>
					<execution>
						<phase>compile</phase>
						<goals>
							<goal>compress</goal>
						</goals>
					</execution>
				</executions>
				<configuration>
					<sourceDirectory>${project.basedir}/target/web-app/_assets/js/
					</sourceDirectory>
					<outputDirectory>${project.basedir}/target/web-app/_assets/js/
					</outputDirectory>
					<includes>
						<include>*.js</include>
            <include>util/*.js</include>
					</includes>
					<excludes>
					  <exclude>util/log.js</exclude>
          </excludes>
          <aggregations>
						<!-- set the correct head for target -->
						<aggregation>
							<output>${project.basedir}/target/web-app/_includes/core/head.html
							</output>
							<includes>
								<include>${project.basedir}/src/_includes/core/target-head.html
								</include>
							</includes>
						</aggregation>
						<!-- set the correct scripts for target -->
						<aggregation>
							<output>${project.basedir}/target/web-app/_includes/core/scripts.html
							</output>
							<includes>
								<include>${project.basedir}/src/_includes/core/target-scripts.html
								</include>
							</includes>
						</aggregation>
						<!-- get all stylesheets together -->
						<aggregation>
							<insertNewLine>true</insertNewLine>
							<output>${project.basedir}/target/web-app/_assets/css/stylesheets.css
							</output>
							<includes>
								<include>${project.basedir}/target/web-app/_assets/css/stylesheet.css
								</include>
							</includes>
						</aggregation>
						<!-- get all common libraries together no need for further minification -->
						<aggregation>
							<insertNewLine>true</insertNewLine>
							<output>${project.basedir}/target/web-app/_assets/js/common.js
							</output>
							<includes>
								<include>${project.basedir}/src/_vendors/jquery-1.8.3/jquery-1.8.3.min.js
								</include>
                <include>*min.js</include>
								<include>util/*min.js</include>
							</includes>
						</aggregation>
					</aggregations>
				</configuration>
			</plugin>
			<plugin>
        <groupId>com.google.code.maven-replacer-plugin</groupId>
        <artifactId>maven-replacer-plugin</artifactId>
        <version>1.4.1</version>
        <executions>
          <execution>
            <phase>prepare-package</phase>
            <goals>
              <goal>replace</goal>
            </goals>
          </execution>
        </executions>
        <configuration>
          <basedir>${project.basedir}</basedir>
          <includes>
            <include>target/**/*.html</include>
          </includes>
          <regex>false</regex>
          <replacements>
            <replacement>
              <token>&lt;!--#include virtual="/_includes/core/head.html"--&gt; </token>
              <valueFile>${project.basedir}/target/web-app/_includes/core/head.html
              </valueFile>
            </replacement>
            <replacement>
              <token>&lt;!--#include virtual="/_includes/core/scripts.html"--&gt;</token>
              <valueFile>${project.basedir}/target/web-app/_includes/core/scripts.html
              </valueFile>
            </replacement>
          </replacements>
        </configuration>
      </plugin>
		</plugins>
		<outputDirectory>${project.basedir}/target/web-app/
		</outputDirectory>
		<resources>
			<resource>
				<directory>${project.basedir}/src</directory>
				<excludes>
					<exclude>**/less/*</exclude>
					<exclude>**/target-head.html</exclude>
					<exclude>**/target-scripts.html</exclude>
				</excludes>
			</resource>
		</resources>
	</build>
	<profiles>
		<!-- special profile to optimize the png files. call with command below -->
		<!-- mvn org.codehaus.mojo:exec-maven-plugin:exec -P optimizepng -->
		<profile>
			<id>optimizepng</id>
			<build>
				<plugins>
					<plugin>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>exec-maven-plugin</artifactId>
						<version>1.2.1</version>
						<executions>
							<execution>
								<phase>prepare-package</phase>
								<goals>
									<goal>exec</goal>
								</goals>
							</execution>
						</executions>
						<configuration>
							<executable>sh</executable>
							<arguments>
								<argument>-c</argument>
								<argument>bin/optipng src/_assets/img/*.png</argument>
							</arguments>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>
		<!-- special profile to optimize the jpg files. call with command below -->
		<!-- mvn org.codehaus.mojo:exec-maven-plugin:exec -P optimizejpg -->
		<profile>
			<id>optimizejpg</id>
			<build>
				<plugins>
					<plugin>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>exec-maven-plugin</artifactId>
						<version>1.2.1</version>
						<executions>
							<execution>
								<phase>prepare-package</phase>
								<goals>
									<goal>exec</goal>
								</goals>
							</execution>
						</executions>
						<configuration>
							<executable>bash</executable>
							<arguments>
								<argument>-c</argument>
								<!-- for i in `ls *.jp*g`; do bin/jpegtran -copy none -optimize -perfect 
									$i $i; done; -->
								<argument></argument>
							</arguments>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>
	</profiles>
	<pluginRepositories>
		<pluginRepository>
			<name>repo1.maven.org</name>
			<id>oss.sonatype.org</id>
			<url>http://oss.sonatype.org/content/groups/public</url>
		</pluginRepository>
	</pluginRepositories>
</project>